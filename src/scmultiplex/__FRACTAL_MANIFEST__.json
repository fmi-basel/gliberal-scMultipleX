{
  "manifest_version": 1,
  "task_list": [
    {
      "name": "scMultipleX Measurements",
      "executable": "fractal/scmultiplex_feature_measurements.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "default_args": {
        "input_ROI_table": "well_ROI_table",
        "level": 0,
        "label_level": 0,
        "measure_morphology": true
      },
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "ScmultiplexFeatureMeasurements",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata. `coarsening_xy (int)`: coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_image": {
            "title": "Label Image",
            "type": "string",
            "description": "Name of the label image to use for measurements. Needs to exist in OME-Zarr file"
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output AnnData table to save the measurements in. A table of this name can't exist yet in the OME-Zarr file"
          },
          "input_channels": {
            "title": "Input Channels",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ChannelInputModel"
            },
            "description": "Dictionary of channels to measure. Keys are the names that will be added as prefixes to the measurements, values are another dictionary containing either wavelength_id or channel_label information to allow Fractal to find the correct channel (but not both). Example: {\"C01\": {\"wavelength_id\": \"A01_C01\"}. To only measure morphology, provide an empty dict"
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "well_ROI_table",
            "type": "string",
            "description": "Name of the ROI table to loop over. Needs to exists as a ROI table in the OME-Zarr file"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the intensity image to load for measurements. Only tested for level 0"
          },
          "label_level": {
            "title": "Label Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to load for measurements."
          },
          "measure_morphology": {
            "title": "Measure Morphology",
            "default": true,
            "type": "boolean",
            "description": "Set to True to measure morphology features"
          },
          "allow_duplicate_labels": {
            "title": "Allow Duplicate Labels",
            "default": false,
            "type": "boolean",
            "description": "Set to True to allow saving measurement tables with non-unique label values. Can happen when segmentation is run on a different ROI than the measurements (e.g. segment per well, but measure per FOV)"
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_image",
          "output_table_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "ChannelInputModel": {
            "title": "ChannelInputModel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          }
        }
      },
      "docs_info": "Measurements of intensities and morphologies\n\nWrapper task for scmultiplex measurements for Fractal to generate\nmeasurements of intensities and morphologies",
      "docs_link": "https://github.com/fmi-basel/gliberal-scMultipleX"
    },
    {
      "name": "scMultipleX Calculate Object Linking",
      "executable": "fractal/calculate_object_linking.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "CalculateObjectLinking",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label name that will be used for label-based registration; e.g. `org` from object segmentation."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "well_ROI_table",
            "type": "string",
            "description": "Name of the well ROI table. Input ROI table must have single ROI entry; e.g. `well_ROI_table`"
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well (usually the first cycle that was provided)."
          },
          "level": {
            "title": "Level",
            "default": 2,
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          },
          "iou_cutoff": {
            "title": "Iou Cutoff",
            "default": 0.2,
            "type": "number",
            "description": "Float in range 0 to 1 to specify intersection over union cutoff. Object pairs that have an iou below this value are filtered out and stored in linking table."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Calculate object linking based on segmentation label map images\n\nThis task consists of 4 parts:\n\n1. Load the object segmentation images for each well (paired reference and alignment round)\n2. Calculate the shift transformation for the image pair\n3. Apply shifts to image pair and identify matching object labels given an iou cutoff threshold\n3. Store the identified matches as a linking table in alignment round directory\n\nParallelization level: image",
      "docs_link": "https://github.com/fmi-basel/gliberal-scMultipleX"
    },
    {
      "name": "scMultipleX Calculate Linking Consensus",
      "executable": "fractal/calculate_linking_consensus.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "well"
      },
      "args_schema": {
        "title": "CalculateLinkingConsensus",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "object_linking",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well, usually the first cycle that was provided"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata"
        ],
        "additionalProperties": false
      },
      "docs_info": "Applies pre-calculated registration to ROI tables.\n\nApply pre-calculated registration such that resulting ROIs contain\nthe consensus align region between all cycles.\n\nParallelization level: well",
      "docs_link": "https://github.com/fmi-basel/gliberal-scMultipleX"
    },
    {
      "name": "scMultipleX Relabel by Linking Consensus",
      "executable": "fractal/relabel_by_linking_consensus.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "RelabelByLinkingConsensus",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label name to be relabeled; e.g. `org` or `nuc`."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "well_ROI_table",
            "type": "string",
            "description": "Name of the ROI table that is parent of label_name. For example segmented organoids or nuclei labels are usually unique across well and so `well_ROI_table` is used."
          },
          "consensus_table": {
            "title": "Consensus Table",
            "default": "object_linking_consensus",
            "type": "string",
            "description": "Name of ROI table that contains consensus linking for label_name across all rounds"
          },
          "table_to_relabel": {
            "title": "Table To Relabel",
            "default": "org_ROI_table",
            "type": "string",
            "description": "Table name to relabel based on consensus linking. The table rows correspond to label_name, e.g. 'org_ROI_table' or 'nuc_ROI_table'"
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well (usually the first cycle that was provided)."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Relabels image labels and ROI tables based on consensus linking.\n\nParallelization level: image",
      "docs_link": "https://github.com/fmi-basel/gliberal-scMultipleX"
    },
    {
      "name": "Calculate Platymatch Registration",
      "executable": "fractal/calculate_platymatch_registration.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 8,
        "mem": 32000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "CalculatePlatymatchRegistration",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/1\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name_to_register": {
            "title": "Label Name To Register",
            "default": "nuc",
            "type": "string",
            "description": "Label name that will be used for label-based registration, e.g. `nuc`."
          },
          "label_name_obj": {
            "title": "Label Name Obj",
            "default": "org_consensus",
            "type": "string",
            "description": "Label name of segmented objects that is parent of label_name_to_register e.g. `org_consensus`."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "org_ROI_table_consensus",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. e.g. consensus object table 'org_ROI_table_consensus'"
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well (usually the first cycle that was provided)."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the labels to register. Choose `0` to process at full resolution."
          },
          "save_transformation": {
            "title": "Save Transformation",
            "default": true,
            "type": "boolean",
            "description": "if True, saves the transformation matrix on disk in subfolder 'transformations'"
          },
          "mask_by_parent": {
            "title": "Mask By Parent",
            "default": true,
            "type": "boolean",
            "description": "if True, nuclei are masked by parent object (e.g. organoid) to only select nuclei belonging to parent. Recommended to set to True when iterating over object (e.g. organoid) ROIs."
          },
          "calculate_ffd": {
            "title": "Calculate Ffd",
            "default": true,
            "type": "boolean",
            "description": "if True, calculate free form deformation registration based on affine linking."
          },
          "seg_channel": {
            "$ref": "#/definitions/ChannelInputModel",
            "title": "Seg_Channel",
            "description": "Channel that was used for nuclear segmentation; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`). Assume same across all rounds."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "seg_channel"
        ],
        "additionalProperties": false,
        "definitions": {
          "ChannelInputModel": {
            "title": "ChannelInputModel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          }
        }
      },
      "docs_info": "Calculate registration based on images\n\nThis task consists of 4 parts:\n\n1. Load the sub-object segmentation images for each well (paired reference and alignment round)\n2. Select sub-objects that belong to object region by loading with object ROI table and mask by object mask.\n   Object pair is defined by consensus linking. Filter the sub-objects to remove small debris that was segmented.\n3. Calculate affine and optionally the free-form deformation for each object pair\n4. Output: save the identified matches as a linking table in alignment round directory\n   and optionally the transformation matrix on disk.\n\nParallelization level: image",
      "docs_link": "https://github.com/fmi-basel/gliberal-scMultipleX"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v1"
}
