{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "scMultiplex Calculate Object Linking",
      "executable_non_parallel": "fractal/_image_based_registration_hcs_init.py",
      "executable_parallel": "fractal/calculate_object_linking.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "title": "ImageBasedRegistrationHcsInit",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "default": 0,
            "type": "integer",
            "description": "Which acquisition to register against. Needs to match the acquisition metadata in the OME-Zarr image."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "CalculateObjectLinking",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsRegistration",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `_image_based_registration_hcs_init`. They contain the reference_zarr_url that is used for registration. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label name that will be used for label-based registration; e.g. `org` from object segmentation."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "well_ROI_table",
            "type": "string",
            "description": "Name of the well ROI table. Input ROI table must have single ROI entry; e.g. `well_ROI_table`"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the image to be processed. Choose `0` to process at full resolution."
          },
          "iou_cutoff": {
            "title": "Iou Cutoff",
            "default": 0.2,
            "type": "number",
            "description": "Float in range 0 to 1 to specify intersection over union cutoff. Object pairs that have an iou below this value are filtered out and not stored in linking table."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "label_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsRegistration": {
            "title": "InitArgsRegistration",
            "description": "Registration init args.",
            "type": "object",
            "properties": {
              "reference_zarr_url": {
                "title": "Reference Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "reference_zarr_url"
            ]
          }
        }
      },
      "docs_info": "## _image_based_registration_hcs_init\nInitialized calculate registration task\n\nThis task prepares a parallelization list of all zarr_urls that need to be\nused to calculate the registration between acquisitions (all zarr_urls\nexcept the reference acquisition vs. the reference acquisition).\nThis task only works for HCS OME-Zarrs for 2 reasons: Only HCS OME-Zarrs\ncurrently have defined acquisition metadata to determine reference\nacquisitions. And we have only implemented the grouping of images for\nHCS OME-Zarrs by well (with the assumption that every well just has 1\nimage per acqusition).\n## calculate_object_linking\nCalculate object linking based on segmentation label map images\n\nThis task consists of 4 parts:\n\n1. Load the object segmentation images for each well (paired reference and alignment round)\n2. Calculate the shift transformation for the image pair\n3. Apply shifts to image pair and identify matching object labels given an iou cutoff threshold\n3. Store the identified matches as a linking table in alignment round directory\n\nParallelization level: image\n"
    },
    {
      "name": "scMultiplex Calculate Linking Consensus",
      "executable_non_parallel": "fractal/_init_group_by_well_for_multiplexing.py",
      "executable_parallel": "fractal/calculate_linking_consensus.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "title": "InitGroupByWellForMultiplexing",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "default": 0,
            "type": "integer",
            "description": "Which acquisition to register against. Uses the OME-NGFF HCS well metadata acquisition keys to find the reference acquisition."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "CalculateLinkingConsensus",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. Refers to the zarr_url of the reference acquisition. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsRegistrationConsensus",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `init_group_by_well_for_multiplexing`. It contains the zarr_url_list listing all the zarr_urls in the same well as the zarr_url of the reference acquisition that are being processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "org_match_table",
            "type": "string",
            "description": "Name of the matching table used to calculate consensus across multiplexing rounds. Typically, this matching table is the output of a linking task, e.g. org_match_table or nuc_match_table. This table must be present in all rounds except for reference round."
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsRegistrationConsensus": {
            "title": "InitArgsRegistrationConsensus",
            "description": "Registration consensus init args.",
            "type": "object",
            "properties": {
              "zarr_url_list": {
                "title": "Zarr Url List",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "zarr_url_list"
            ]
          }
        }
      },
      "docs_info": "## _init_group_by_well_for_multiplexing\nFinds images for all acquisitions per well.\n\nReturns the parallelization_list to run `find_registration_consensus`.\n## calculate_linking_consensus\nApplies pre-calculated registration to ROI tables.\n\nApply pre-calculated registration such that resulting ROIs contain\nthe consensus align region between all cycles.\n\nParallelization level: well\n"
    },
    {
      "name": "scMultiplex Relabel by Linking Consensus",
      "executable_non_parallel": "fractal/_image_based_registration_hcs_allrounds_init.py",
      "executable_parallel": "fractal/relabel_by_linking_consensus.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "title": "ImageBasedRegistrationHcsAllroundsInit",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "default": 0,
            "type": "integer",
            "description": "Which acquisition to register against. Needs to match the acquisition metadata in the OME-Zarr image."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "RelabelByLinkingConsensus",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsRegistration",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `_image_based_registration_hcs_init`. They contain the reference_zarr_url that is used for registration. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label name to be relabeled; e.g. `org` or `nuc`."
          },
          "consensus_table": {
            "title": "Consensus Table",
            "default": "org_match_table_consensus",
            "type": "string",
            "description": "Name of consensus matching table that specifies consensus matches across rounds, typically stored in reference round zarr."
          },
          "table_to_relabel": {
            "title": "Table To Relabel",
            "default": "org_ROI_table",
            "type": "string",
            "description": "Table name to relabel based on consensus linking. The table rows correspond to specified 'Label name', e.g. 'org_ROI_table' or 'nuc_ROI_table'"
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "label_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsRegistration": {
            "title": "InitArgsRegistration",
            "description": "Registration init args.",
            "type": "object",
            "properties": {
              "reference_zarr_url": {
                "title": "Reference Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "reference_zarr_url"
            ]
          }
        }
      },
      "docs_info": "## _image_based_registration_hcs_allrounds_init\nInitialized calculate registration task\n\nSame as _image_based_registration_hcs_init.py only does not exclude reference round in zarr_url list;\nall rounds are processed.\n## relabel_by_linking_consensus\nRelabels image labels and ROI tables based on consensus linking.\n\nParallelization level: image\n"
    },
    {
      "name": "scMultiplex Calculate Platymatch Registration",
      "executable_non_parallel": "fractal/_image_based_registration_hcs_init.py",
      "executable_parallel": "fractal/calculate_platymatch_registration.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "title": "ImageBasedRegistrationHcsInit",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "default": 0,
            "type": "integer",
            "description": "Which acquisition to register against. Needs to match the acquisition metadata in the OME-Zarr image."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "CalculatePlatymatchRegistration",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsRegistration",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `_image_based_registration_hcs_init`. They contain the reference_zarr_url that is used for registration. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "seg_channel": {
            "$ref": "#/definitions/ChannelInputModel",
            "title": "Seg_Channel",
            "description": "Channel that was used for nuclear segmentation; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`). Assume same across all rounds."
          },
          "label_name_to_register": {
            "title": "Label Name To Register",
            "default": "nuc",
            "type": "string",
            "description": "Label name that will be used for label-based registration, e.g. `nuc`."
          },
          "label_name_obj": {
            "title": "Label Name Obj",
            "default": "org_linked",
            "type": "string",
            "description": "Label name of segmented objects that is parent of label_name_to_register e.g. `org_linked`."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "org_ROI_table_linked",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. e.g. linked consensus object table 'org_ROI_table_linked'"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the labels to register. Choose `0` to process at full resolution."
          },
          "save_transformation": {
            "title": "Save Transformation",
            "default": true,
            "type": "boolean",
            "description": "if True, saves the transformation matrix on disk in subfolder 'transformations'"
          },
          "mask_by_parent": {
            "title": "Mask By Parent",
            "default": true,
            "type": "boolean",
            "description": "if True, nuclei are masked by parent object (e.g. organoid) to only select nuclei belonging to parent. Recommended to set to True when iterating over object (e.g. organoid) ROIs."
          },
          "calculate_ffd": {
            "title": "Calculate Ffd",
            "default": true,
            "type": "boolean",
            "description": "if True, calculate free form deformation registration based on affine linking."
          },
          "volume_filter": {
            "title": "Volume Filter",
            "default": true,
            "type": "boolean",
            "description": "if True, performing volume filtering of nuclei to remove objects smaller than specified volume_filter_threshold."
          },
          "volume_filter_threshold": {
            "title": "Volume Filter Threshold",
            "default": 0.05,
            "type": "number",
            "description": "Multiplier that specifies cutoff for volumes below which nuclei are filtered out, float in range [0,1], e.g. 0.05 means that 5% of median of nuclear volume distribution is used as cutoff. Specify this value if volume filtering is desired. Default 0.05."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "seg_channel"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsRegistration": {
            "title": "InitArgsRegistration",
            "description": "Registration init args.",
            "type": "object",
            "properties": {
              "reference_zarr_url": {
                "title": "Reference Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "reference_zarr_url"
            ]
          },
          "ChannelInputModel": {
            "title": "ChannelInputModel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          }
        }
      },
      "docs_info": "## _image_based_registration_hcs_init\nInitialized calculate registration task\n\nThis task prepares a parallelization list of all zarr_urls that need to be\nused to calculate the registration between acquisitions (all zarr_urls\nexcept the reference acquisition vs. the reference acquisition).\nThis task only works for HCS OME-Zarrs for 2 reasons: Only HCS OME-Zarrs\ncurrently have defined acquisition metadata to determine reference\nacquisitions. And we have only implemented the grouping of images for\nHCS OME-Zarrs by well (with the assumption that every well just has 1\nimage per acqusition).\n## calculate_platymatch_registration\nCalculate registration based on images\n\nThis task consists of 4 parts:\n\n1. Load the sub-object segmentation images for each well (paired reference and alignment round)\n2. Select sub-objects that belong to object region by loading with object ROI table and mask by object mask.\n   Object pair is defined by consensus linking. Filter the sub-objects to remove small debris that was segmented.\n3. Calculate affine and optionally the free-form deformation for each object pair\n4. Output: save the identified matches as a linking table in alignment round directory\n   and optionally the transformation matrix on disk.\n\nParallelization level: image\n"
    },
    {
      "name": "scMultiplex Surface Mesh",
      "executable_non_parallel": "fractal/_init_group_by_well_for_multiplexing.py",
      "executable_parallel": "fractal/surface_mesh.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "title": "InitGroupByWellForMultiplexing",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "default": 0,
            "type": "integer",
            "description": "Which acquisition to register against. Uses the OME-NGFF HCS well metadata acquisition keys to find the reference acquisition."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "SurfaceMesh",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. Refers to the zarr_url of the reference acquisition. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsRegistrationConsensus",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `init_group_by_well_for_multiplexing`. It contains the zarr_url_list listing all the zarr_urls in the same well as the zarr_url of the reference acquisition that are being processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_name": {
            "title": "Label Name",
            "default": "nuc",
            "type": "string",
            "description": "Label name that will be used for surface estimation, e.g. `nuc`."
          },
          "label_name_obj": {
            "title": "Label Name Obj",
            "default": "org_linked",
            "type": "string",
            "description": "Label name of segmented objects that is parent of label_name e.g. `org_consensus`."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "org_ROI_table_linked",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. e.g. consensus object table 'org_ROI_table_consensus'"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the labels to register. Choose `0` to process at full resolution."
          },
          "expandby_factor": {
            "title": "Expandby Factor",
            "default": 0.6,
            "type": "number",
            "description": "multiplier that specifies pixels by which to expand each nuclear mask for merging, float in range [0,1 or higher], e.g. 0.2 means that 20% of mean of nuclear equivalent diameter is used."
          },
          "sigma_factor": {
            "title": "Sigma Factor",
            "default": 5,
            "type": "number",
            "description": "float that specifies sigma (standard deviation) for Gaussian kernel. Higher values correspond to more blurring. Recommended range 1-8."
          },
          "canny_threshold": {
            "title": "Canny Threshold",
            "default": 0.3,
            "type": "number",
            "description": "image values below this threshold are set to 0 after Gaussian blur. float in range [0,1]. Higher values result in tighter fit of mesh to nuclear surface"
          },
          "save_mesh": {
            "title": "Save Mesh",
            "default": true,
            "type": "boolean",
            "description": "if True, saves the vtk mesh on disk in subfolder 'meshes'. Filename corresponds to object label id"
          },
          "save_labels": {
            "title": "Save Labels",
            "default": true,
            "type": "boolean",
            "description": "if True, saves the calculated 3D label map as label map in 'labels' with suffix '_3d'"
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsRegistrationConsensus": {
            "title": "InitArgsRegistrationConsensus",
            "description": "Registration consensus init args.",
            "type": "object",
            "properties": {
              "zarr_url_list": {
                "title": "Zarr Url List",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "zarr_url_list"
            ]
          }
        }
      },
      "docs_info": "## _init_group_by_well_for_multiplexing\nFinds images for all acquisitions per well.\n\nReturns the parallelization_list to run `find_registration_consensus`.\n## surface_mesh\nCalculate 3D surface mesh of parent object (e.g. tissue, organoid)\nfrom 3D cell-level segmentation of children (e.g. nuclei)\n\nThis task consists of 4 parts:\n\n1. Load the sub-object (e.g. nuc) segmentation images for each object of a given reference round; skip other rounds.\n    Select sub-objects (e.g. nuc) that belong to parent object region by masking by parent.\n    Filter the sub-objects to remove small debris that was segmented.\n2. Perform label fusion and edge detection to generate surface label image.\n3. Calculate surface mesh of label image using marching cubes algorithm.\n4. Output: save the (1) meshes (.vtp) per object id in meshes folder and (2) well label map as a new label in zarr.\n    Note that label map output may be clipped for objects that are dense and have overlapping pixels.\n    In this case, the 'winning' object in the overlap region is the one with higher label id.\n\nParallelization level: image\n"
    },
    {
      "name": "scMultiplex Feature Measurements",
      "executable_parallel": "fractal/scmultiplex_feature_measurements.py",
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_parallel": {
        "title": "ScmultiplexFeatureMeasurements",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_image": {
            "title": "Label Image",
            "type": "string",
            "description": "Name of the label image to use for measurements. Needs to exist in OME-Zarr file"
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output AnnData table to save the measurements in. A table of this name can't exist yet in the OME-Zarr file"
          },
          "input_channels": {
            "title": "Input Channels",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ChannelInputModel"
            },
            "description": "Dictionary of channels to measure. Keys are the names that will be added as prefixes to the measurements, values are another dictionary containing either wavelength_id or channel_label information to allow Fractal to find the correct channel (but not both). Example: {\"C01\": {\"wavelength_id\": \"A01_C01\"}. To only measure morphology, provide an empty dict"
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "well_ROI_table",
            "type": "string",
            "description": "Name of the ROI table to loop over. Needs to exists as a ROI table in the OME-Zarr file"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the intensity image to load for measurements. Only tested for level 0"
          },
          "label_level": {
            "title": "Label Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to load for measurements."
          },
          "measure_morphology": {
            "title": "Measure Morphology",
            "default": true,
            "type": "boolean",
            "description": "Set to True to measure morphology features"
          },
          "allow_duplicate_labels": {
            "title": "Allow Duplicate Labels",
            "default": false,
            "type": "boolean",
            "description": "Set to True to allow saving measurement tables with non-unique label values. Can happen when segmentation is run on a different ROI than the measurements (e.g. segment per well, but measure per FOV)"
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "label_image",
          "output_table_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "ChannelInputModel": {
            "title": "ChannelInputModel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          }
        }
      },
      "docs_info": "## scmultiplex_feature_measurements\nMeasurements of intensities and morphologies\n\nWrapper task for scmultiplex measurements for Fractal to generate\nmeasurements of intensities and morphologies\n"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v1"
}
