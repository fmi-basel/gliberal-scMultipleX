{
  "manifest_version": 1,
  "task_list": [
    {
      "name": "scMultipleX Measurements",
      "executable": "fractal/scmultiplex_feature_measurements.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "default_args": {
        "input_ROI_table": "well_ROI_table",
        "level": 0,
        "label_level": 0,
        "measure_morphology": true
      },
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "ScmultiplexFeatureMeasurements",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TBD (default arg for Fractal tasks)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "TBD (default arg for Fractal tasks)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "TBD (default arg for Fractal tasks)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "TBD (default arg for Fractal tasks)"
          },
          "label_image": {
            "title": "Label Image",
            "type": "string",
            "description": "Name of the label image to use for measurements. Needs to exist in OME-Zarr file"
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output AnnData table to save the measurements in. A table of this name can't exist yet in the OME-Zarr file"
          },
          "input_channels": {
            "title": "Input Channels",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Channel"
            },
            "description": "Dictionary of channels to measure. Keys are the names that will be added as prefixes to the measurements, values are another dictionary containing either wavelength_id or channel_label information to allow Fractal to find the correct channel (but not both). Example: {\"C01\": {\"wavelength_id\": \"A01_C01\"} To only measure morphology, provide an empty dict"
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table to loop over. Needs to exists as a ROI table in the OME-Zarr file"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the intensity image to load for measurements. Only tested for level 0"
          },
          "label_level": {
            "title": "Label Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to load for measurements."
          },
          "measure_morphology": {
            "title": "Measure Morphology",
            "default": true,
            "type": "boolean",
            "description": "Set to True to measure morphology features"
          },
          "allow_duplicate_labels": {
            "title": "Allow Duplicate Labels",
            "default": false,
            "type": "boolean",
            "description": "Set to True to allow saving measurement tables with non-unique label values. Can happen when segmentation is run on a different ROI than the measurements (e.g. segment per well, but measure per FOV)"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_image",
          "output_table_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "Channel": {
            "title": "Channel",
            "description": "A channel which is specified by either ``wavelength_id`` or ``label``.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. ``A01_C01``."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              }
            }
          }
        }
      }
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v1"
}
